#!/usr/bin/env bash

source $HOME/.config/base16-shell/base16-monokai.sh

__blockprompt() {

    # Unicode symbols
    readonly PS_SYMBOL='$'
    #readonly GIT_BRANCH_SYMBOL=' '
    readonly GIT_BRANCH_CHANGED_SYMBOL='| +'
    readonly GIT_NEED_PUSH_SYMBOL='⇡'
    readonly GIT_NEED_PULL_SYMBOL='⇣'

    # Solarized colorscheme
    readonly FG_RED="\[$(tput setaf 1)\]"
    readonly FG_BLUE="\[$(tput setaf 4)\]"
    readonly FG_GREEN="\[$(tput setaf 83)\]"
    readonly FG_VOID="\[$(tput setaf 0)\]"

    readonly BG_RED="\[$(tput setab 1)\]"
    readonly BG_BLUE="\[$(tput setab 31)\]"
    readonly BG_GREEN="\[$(tput setab 2)\]"
    readonly BG_WHITE="\[$(tput setab 15)\]"
    readonly BG_PURPLE="\[$(tput setab 60)\]"

    readonly DIM="\[$(tput dim)\]"
    readonly REVERSE="\[$(tput rev)\]"
    readonly RESET="\[$(tput sgr0)\]"
    readonly BOLD="\[$(tput bold)\]"

    __git_info() { 
        [ -n "$(git status 2>/dev/null)" ] || return # fatal error

        # get current branch name or short SHA1 hash for detached head
        local branch="$(git symbolic-ref --short HEAD 2>/dev/null || git describe --tags --always 2>/dev/null)"
        [ -n "$branch" ] || return  # git branch not found

        local marks

        # branch is modified?
        [ -n "$(git status --porcelain)" ] && marks+=" $GIT_BRANCH_CHANGED_SYMBOL"

        # how many commits local branch is ahead/behind of remote?
        local stat="$(git status --porcelain --branch | grep '^##' | grep -o '\[.\+\]$')"
        local aheadN="$(echo $stat | grep -o 'ahead [[:digit:]]\+' | grep -o '[[:digit:]]\+')"
        local behindN="$(echo $stat | grep -o 'behind [[:digit:]]\+' | grep -o '[[:digit:]]\+')"
        [ -n "$aheadN" ] && marks+=" $GIT_NEED_PUSH_SYMBOL$aheadN"
        [ -n "$behindN" ] && marks+=" $GIT_NEED_PULL_SYMBOL$behindN"

        # print the git branch segment without a trailing newline
        printf " $GIT_BRANCH_SYMBOL$branch$marks "
    }

    ps1() {
        # Check the exit code of the previous command and display different
        # colors in the prompt accordingly. 
        if [ $? -eq 0 ]; then
            local BG_EXIT="$BG_GREEN"
        else
            local BG_EXIT="$BG_RED"
        fi

        PS1="$RESET"
        PS1+="$BG_PURPLE$FG_WHITE \w $RESET"
        PS1+="$BG_BLUE$FG_WHITE$(__git_info)$RESET"
        PS1+="$BG_EXIT$FG_VOID $PS_SYMBOL $RESET "
    }

    PROMPT_COMMAND=ps1
}

__blockprompt
unset __blockprompt
